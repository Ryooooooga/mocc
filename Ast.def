#ifndef NODE
#define NODE(name, base)
#endif

#ifndef NODE_END
#define NODE_END()
#endif

#ifndef NODE_MEMBER
#define NODE_MEMBER(T, x)
#endif

#ifndef NODE_MEMBER_F
#define NODE_MEMBER_F(T, x, f) NODE_MEMBER(T, x)
#endif

#ifndef UNARY_OP
#define UNARY_OP(name)
#endif

#ifndef BINARY_OP
#define BINARY_OP(name)
#endif

#ifndef EXPR_NODE
#define EXPR_NODE(name) NODE(name, Expr)
#endif

#ifndef STMT_NODE
#define STMT_NODE(name) NODE(name, Stmt)
#endif

#ifndef DECLARATOR_NODE
#define DECLARATOR_NODE(name) NODE(name, Declarator)
#endif

#ifndef DECL_NODE
#define DECL_NODE(name) NODE(name, Decl)
#endif

// Expressions
EXPR_NODE(Identifier)
    NODE_MEMBER_F(Symbol *, symbol, Symbol)
NODE_END()

EXPR_NODE(Enumerator)
    NODE_MEMBER_F(Symbol *, symbol, Symbol)
    NODE_MEMBER(int, value)
NODE_END()

EXPR_NODE(Integer)
    NODE_MEMBER_F(int, value, int)
NODE_END()

EXPR_NODE(String)
    NODE_MEMBER_F(const char *, value, string)
    NODE_MEMBER_F(size_t, length, size_t)
NODE_END()

EXPR_NODE(Subscript)
    NODE_MEMBER_F(ExprNode *, array, Expr)
    NODE_MEMBER_F(ExprNode *, index, Expr)
NODE_END()

EXPR_NODE(Call)
    NODE_MEMBER_F(ExprNode *, callee, Expr)
    NODE_MEMBER_F(Vec(ExprNode) *, arguments, Exprs)
NODE_END()

EXPR_NODE(Dot)
    NODE_MEMBER_F(ExprNode *, parent, Expr)
    NODE_MEMBER_F(Symbol *, member_symbol, Symbol)
NODE_END()

EXPR_NODE(Arrow)
    NODE_MEMBER_F(ExprNode *, parent, Expr)
    NODE_MEMBER_F(Symbol *, member_symbol, Symbol)
NODE_END()

EXPR_NODE(Sizeof)
    NODE_MEMBER(Type *, type)
    NODE_MEMBER_F(ExprNode *, expression, Expr)
NODE_END()

EXPR_NODE(Cast)
    NODE_MEMBER_F(ExprNode *, expression, Expr)
NODE_END()

UNARY_OP(address_of)
UNARY_OP(indirection)

EXPR_NODE(Unary)
    NODE_MEMBER_F(UnaryOp, operator, UnaryOp)
    NODE_MEMBER_F(ExprNode *, operand, Expr)
NODE_END()

BINARY_OP(add)
BINARY_OP(sub)
BINARY_OP(mul)
BINARY_OP(div)
BINARY_OP(mod)
BINARY_OP(lesser_than)
BINARY_OP(lesser_equal)
BINARY_OP(greater_than)
BINARY_OP(greater_equal)
BINARY_OP(equal)
BINARY_OP(not_equal)
BINARY_OP(logical_and)
BINARY_OP(logical_or)

EXPR_NODE(Binary)
    NODE_MEMBER_F(BinaryOp, operator, BinaryOp)
    NODE_MEMBER_F(ExprNode *, lhs, Expr)
    NODE_MEMBER_F(ExprNode *, rhs, Expr)
NODE_END()

EXPR_NODE(Assign)
    NODE_MEMBER_F(ExprNode *, lhs, Expr)
    NODE_MEMBER_F(ExprNode *, rhs, Expr)
NODE_END()

EXPR_NODE(ImplicitCast)
    NODE_MEMBER_F(ImplicitCastOp, operator, ImplicitCastOp)
    NODE_MEMBER_F(ExprNode *, expression, Expr)
NODE_END()

// Statements
STMT_NODE(Compound)
    NODE_MEMBER_F(Vec(StmtNode) *, statements, Stmts)
NODE_END()

STMT_NODE(If)
    NODE_MEMBER_F(ExprNode *, condition, Expr)
    NODE_MEMBER_F(StmtNode *, if_true, Stmt)
    NODE_MEMBER_F(StmtNode *, if_false, Stmt)
NODE_END()

STMT_NODE(While)
    NODE_MEMBER_F(ExprNode *, condition, Expr)
    NODE_MEMBER_F(StmtNode *, body, Stmt)
NODE_END()

STMT_NODE(For)
    NODE_MEMBER_F(StmtNode *, initializer, Stmt)
    NODE_MEMBER_F(ExprNode *, condition, Expr)
    NODE_MEMBER_F(ExprNode *, step, Expr)
    NODE_MEMBER_F(StmtNode *, body, Stmt)
NODE_END()

STMT_NODE(Return)
    NODE_MEMBER_F(ExprNode *, return_value, Expr)
NODE_END()

STMT_NODE(Decl)
    NODE_MEMBER_F(DeclSpecNode *, decl_spec, DeclSpec)
    NODE_MEMBER_F(Vec(DeclaratorNode) *, declarators, Declarators)
NODE_END()

STMT_NODE(Expr)
    NODE_MEMBER_F(ExprNode *, expression, Expr)
NODE_END()

// Declarator
DECLARATOR_NODE(AbstractDirect)
    NODE_MEMBER_F(Symbol *, symbol, Symbol)
NODE_END()

DECLARATOR_NODE(Direct)
    NODE_MEMBER(const char *, name)
    NODE_MEMBER_F(Symbol *, symbol, Symbol)
NODE_END()

DECLARATOR_NODE(Array)
    NODE_MEMBER_F(DeclaratorNode *, declarator, Declarator)
    NODE_MEMBER_F(ExprNode *, array_size, Expr)
NODE_END()

DECLARATOR_NODE(Function)
    NODE_MEMBER_F(DeclaratorNode *, declarator, Declarator)
    NODE_MEMBER_F(Vec(DeclaratorNode) *, parameters, Declarators)
    NODE_MEMBER_F(bool, is_var_arg, bool)
NODE_END()

DECLARATOR_NODE(Pointer)
    NODE_MEMBER_F(DeclaratorNode *, declarator, Declarator)
NODE_END()

DECLARATOR_NODE(Init)
    NODE_MEMBER_F(DeclaratorNode *, declarator, Declarator)
    NODE_MEMBER_F(ExprNode *, initializer, Expr)
NODE_END()

// Declarations
DECL_NODE(Global)
    NODE_MEMBER_F(DeclSpecNode *, decl_spec, DeclSpec)
    NODE_MEMBER_F(Vec(DeclaratorNode) *, declarators, Declarators)
NODE_END()

DECL_NODE(Function)
    NODE_MEMBER_F(DeclSpecNode *, decl_spec, DeclSpec)
    NODE_MEMBER_F(DeclaratorNode *, declarator, Declarator)
    NODE_MEMBER_F(StmtNode *, body, Stmt)
    NODE_MEMBER(Vec(Symbol) *, local_variables)
NODE_END()

DECL_NODE(Member)
    NODE_MEMBER_F(DeclSpecNode *, decl_spec, DeclSpec)
    NODE_MEMBER_F(Vec(DeclaratorNode) *, declarators, Declarators)
NODE_END()

DECL_NODE(Enumerator)
    NODE_MEMBER_F(Symbol *, symbol, Symbol)
    NODE_MEMBER_F(ExprNode *, value, Expr)
NODE_END()

// Misc
NODE(DeclSpec, )
    NODE_MEMBER_F(StorageClass, storage_class, StorageClass)
    NODE_MEMBER(Type *, base_type)
NODE_END()

NODE(TranslationUnit, )
    NODE_MEMBER_F(Vec(DeclNode) *, declarations, Decls)
NODE_END()

#undef NODE
#undef NODE_END
#undef NODE_MEMBER
#undef NODE_MEMBER_F
#undef UNARY_OP
#undef BINARY_OP
#undef EXPR_NODE
#undef STMT_NODE
#undef DECLARATOR_NODE
#undef DECL_NODE
